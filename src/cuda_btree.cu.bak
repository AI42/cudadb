#include "cuda_btree.cuh"
#include "cuda_common.h"
#include "cuda_util.h"

#include <cuda.h>

#define BTREE_KEY_NOT_PRESENT (1 << (sizeof(int)*8 - 1)) 

#define BTREE_NUM_BLOCKS 15
#define BTREE_NUM_WARPS  15
#define BTREE_NUM_THREADS (BTREE_NUM_WARPS*WARP_SIZE())

#define BTREE_NUM_ROOTS (BTREE_NUM_BLOCKS*BTREE_NUM_WARPS)

#define BTREE_NODE_KEYS 31
#define BTREE_NODE_CHILDREN (BTREE_NODE_KEYS + 1)


struct btree_node {
	int keys[BTREE_NODE_KEYS + 1]; // add an extra key slot to make processing easier/align children
	btree_node* children[BTREE_NODE_CHILDREN];
};

struct btree {
	btree_node* roots[BTREE_NUM_ROOTS];
};

/**
 *	Initializes a new btree.
 */
static __global__ void dev_btree_create(btree *tree) {
	ASSERT(tree != NULL);
	int idx = LANE_INDEX();
	int aidx = BLOCK_INDEX() * BTREE_NUM_WARPS + LANE_INDEX(); 

	// initialize all roots
	btree_node* my_node;
	if(idx < BTREE_NUM_WARPS) {
		my_node = (btree_node *)malloc(sizeof(btree_node));
		ASSERT(my_node != NULL);
		tree->roots[aidx] = my_node;
	}

	// zero all roots in warp
	btree_node* cur_node;
	for(int i = 0; i < BTREE_NUM_WARPS; i++) {
		cur_node = (btree_node*)__broadcast_ptr(my_node, i);
		cur_node->keys[idx] = BTREE_KEY_NOT_PRESENT;
		cur_node->children[idx] = NULL;
	}
}

btree *btree_create() {
	btree* tree;
	HANDLE_ERROR(cudaMalloc(&tree, sizeof(btree)), return NULL);
	dev_btree_create<<<BTREE_NUM_BLOCKS, WARP_SIZE()>>>(tree);
	return tree;
}

/**
 *	Determines whether a single element is in the tree.
 *  
 *  BLOCK_SIZE: 32x1
 *  GRID_SIZE:  1x1
 */
static __global__ void dev_btree_contains(btree *tree, int x, bool *res) {
	ASSERT(tree != NULL);
	ASSERT(res != NULL);

	int idx = LANE_INDEX();
	int root_idx = BLOCK_INDEX() * BTREE_NUM_WARPS + WARP_INDEX();

	btree_node *cur = tree->roots[root_idx];
	ASSERT(cur != NULL);
	while(cur != NULL) {
		
		int key = cur->keys[idx];

		// check if key matches
		if(__any(key == x)) {
			*res = true;
			return;
		} 

		// find index into node, key[31] never present so we don't go out of bounds
		int node_idx = __first_lane_true_idx(key == BTREE_KEY_NOT_PRESENT || key > x);
		cur = cur->children[node_idx];
	}

	return;
}


bool btree_contains(btree *tree, int x) {
	
	bool res = false;
	bool *res_d; // TODO reuse bools
	HANDLE_ERROR(cudaMalloc(&res_d, sizeof(bool)), exit(1));
	HANDLE_ERROR(cudaMemset(res_d, 0, sizeof(bool)), exit(1));
	dev_btree_contains<<<BTREE_NUM_BLOCKS, BTREE_NUM_THREADS>>>(tree, x, res_d);
	HANDLE_ERROR(cudaMemcpy(&res, res_d, sizeof(bool), cudaMemcpyDeviceToHost), exit(1));
	HANDLE_ERROR(cudaFree(res_d), exit(1));
	return res;

}

/**
 *	Inserts a value into an unfull node.
 *
 *  BLOCK SIZE: 32x1
 *  GRID SIZE:  1x1
 */
static __device__ void dev_btree_node_insert(btree_node *node, int x, btree_node *xp) {
	ASSERT(node != NULL);

	int idx = LANE_INDEX();

	int key = node->keys[idx];
	ASSERT(__any(idx < BTREE_NODE_KEYS && key == BTREE_KEY_NOT_PRESENT));

	// get the first lane where the key is greater than the new value or an empty lane
	int insert_idx = __first_lane_true_idx(key == BTREE_KEY_NOT_PRESENT || key > x);
	ASSERT(insert_idx < BTREE_NODE_KEYS);

	// shift old keys
	if(insert_idx <= idx && key != BTREE_KEY_NOT_PRESENT) {
		ASSERT(idx + 1 < BTREE_NODE_KEYS);
		ASSERT(idx + 2 < BTREE_NODE_CHILDREN);
		node->keys[idx + 1] = key;
		node->children[idx + 2] = node->children[idx + 1];
	}

	// insert new key
	node->keys[insert_idx] = x;
	node->children[insert_idx + 1] = xp;
}

static __device__ btree_node* dev_btree_node_split(btree *tree, int root, btree_node *parent, btree_node *left) {
	ASSERT(tree != NULL);
	ASSERT(left != NULL);

	// declare shared memory and get our warps chunk
	__shared__ int scratch_keys_base[(BTREE_NODE_KEYS+1)*BTREE_NUM_WARPS];
	__shared__ btree_node* scratch_children_base[BTREE_NODE_CHILDREN*BTREE_NUM_WARPS];
	int* scratch_keys = &scratch_keys_base[(BTREE_NODE_KEYS+1)*WARP_INDEX()];
	btree_node** scratch_children = &scratch_children_base[BTREE_NODE_CHILDREN*WARP_INDEX()];

	int idx = LANE_INDEX();
	int key = left->keys[idx];
	ASSERT(__all(idx >= BTREE_NODE_KEYS || key != BTREE_KEY_NOT_PRESENT)); // assert full

	// initialize shared memory
	scratch_keys[idx] = key;
	scratch_children[idx] = left->children[idx];

	// allocate new node
	btree_node *right;
	if(idx == 0) {
		right = (btree_node*)malloc(sizeof(btree_node));
		ASSERT(right != NULL);
	}
	right = (btree_node*)__broadcast_ptr(right, 0);

	// populate nodes TODO more effiently on left
	left->keys[idx] = idx < BTREE_NODE_KEYS/2 ? scratch_keys[idx] : BTREE_KEY_NOT_PRESENT;
	left->children[idx] = idx < BTREE_NODE_CHILDREN/2 ? scratch_children[idx] : NULL;

	right->keys[idx] = idx < BTREE_NODE_KEYS/2 ? scratch_keys[idx + BTREE_NODE_KEYS/2 + 1] : BTREE_KEY_NOT_PRESENT;
	right->children[idx] = idx < BTREE_NODE_CHILDREN/2 ? scratch_children[idx + BTREE_NODE_CHILDREN/2] : NULL;
	
	int split = scratch_keys[BTREE_NODE_KEYS/2];

	if(parent == NULL) {
		// we were splitting root, make new root
		btree_node* new_root;
		if(idx == 0) {
			new_root = (btree_node*)malloc(sizeof(btree_node));
			ASSERT(new_root != NULL);
		}
		new_root = (btree_node*)__broadcast_ptr(new_root, 0);
		
		// initialize new root
		new_root->keys[idx] = idx == 0 ? split : BTREE_KEY_NOT_PRESENT;
		new_root->children[idx] = idx == 0 ? left : idx == 1 ? right : NULL;
		
		// set new root in tree
		tree->roots[root] = new_root;
	} else {
		// insert right into parent, assume parent not full
		dev_btree_node_insert(parent, split, right);
	}

	return right;
}

/**
 *	Inserts a single element into the tree.
 */
static __device__ void dev_btree_insert(btree *tree, int root, int x) {
	ASSERT(tree != NULL);
	int idx = LANE_INDEX();

	// traverse down to leaf node splitting as we go
	btree_node* parent = NULL;
	btree_node* cur = tree->roots[root];
	while(1) {
		
		int key = cur->keys[idx];

		if(__any(key == x)) {
			// value already in tree
			return; 
		}
	
		int node_idx = __first_lane_true_idx(key == BTREE_KEY_NOT_PRESENT || key > x);
		if(__all(idx >= BTREE_NODE_KEYS || key != BTREE_KEY_NOT_PRESENT)) {
			// node full, split it
			btree_node* new_node = dev_btree_node_split(tree, root, parent, cur);
			if(node_idx >= BTREE_NODE_CHILDREN/2) {
				// need to go into right index
				cur = new_node;
				node_idx -= BTREE_NODE_CHILDREN/2;
			}
		}

		// break if we've reached a leaf node
		if(cur->children[0] == NULL) { // TODO we know height, only recurse n times
			break;
		} 
		
		// store node in path and advance, key[31] never present so we won't go out of bounds
		parent = cur;
		cur = cur->children[node_idx];
	}

	// cur now equals leaf, insert into it
	dev_btree_node_insert(cur, x, NULL);
}

static __global__ void dev_btree_insert_single(btree *tree, int root, int x) {
	dev_btree_insert(tree, root, x);
}

void btree_insert(btree *tree, int x) {
	
	static int next_insert = 0;
	dev_btree_insert_single<<<1, 32>>>(tree, next_insert, x);
	next_insert = (next_insert + 1) % BTREE_NUM_ROOTS;

}

static __global__ void dev_btree_insert_bulk(btree *tree, int *xs, int n) {
	int root_idx = BLOCK_INDEX() * BTREE_NUM_WARPS + WARP_INDEX();
	for(int i = root_idx; i < n; i += BTREE_NUM_ROOTS) {
		dev_btree_insert(tree, root_idx, xs[i]);
	}
}

void btree_insert_bulk(btree *tree, int *xs, int n) {

	int *xs_d;
	HANDLE_ERROR(cudaMalloc(&xs_d, sizeof(int) * n), exit(1));
	HANDLE_ERROR(cudaMemcpy(xs_d, xs, sizeof(int) * n, cudaMemcpyHostToDevice), exit(1));
	dev_btree_insert_bulk<<<BTREE_NUM_BLOCKS,BTREE_NUM_THREADS>>>(tree, xs_d, n);
	HANDLE_ERROR(cudaFree(xs_d), exit(1));
	return;
}
